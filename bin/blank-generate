#! /usr/bin/env bash

# Create a static site for /blank, or a single repository.
#
# Most of the work is done by nix-build: building a repository results in a
# static site presenting that repository at `result/`.
#
# If the build fails, the failure is recorded and rendered elsewhere (`result/`
# is for successful nix-build only).
#
# nix-build is called on default.nix, which requires some angle-bracket to be
# filled; so this scripts first generates a JSON file (e.g. with the commit
# being built).
#
# Takes a repository name as argument or --all.

echo "blank-generate Called with $1" >> /blank/blank.log

if [[ -z "$1" ]] ; then
  echo "Usage: blank-generate --all | REPO"
  exit 1
fi

mkdir -p /blank/run
# When run through the web server, this generates a directory
# within /run/user/1000/, not within /blank/run.
# Indeed, nix-shell -p cowsay --run 'mktemp -d -p /blank/run -t blank.XXXXXX'
# is also using /run/user/1000.
RUN_DIR=$(mktemp -d -p /blank/run -t blank-XXXXXX)
SITE_DIR="${RUN_DIR}/_site"
mkdir -p "${SITE_DIR}"

echo "blank-generate Using RUN_DIR ${RUN_DIR}" >> /blank/blank.log

# TODO The nixpkgs version should be more explicit than this.
export NIX_PATH="nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixos"
echo "blank-generate Using NIX_PATH ${NIX_PATH}" >> /blank/blank.log

if [[ "$1" == "--all" ]] ; then
  find /blank/ -maxdepth 1 -type d -name '*.git' -exec basename {} \; > \
    "${RUN_DIR}/list-of-repositories.txt"
else
  if [[ ! -d "/blank/$1.git" ]] ; then
    echo "No such repository."
    exit 1
  fi
  echo "$1.git" > "${RUN_DIR}/list-of-repositories.txt"
fi


cd /home/thu/projects/blank
cat "${RUN_DIR}/list-of-repositories.txt" | \
  while read -r line ; do
    REPO="${line%.*}"

    # Generate a mini-site for a particular repository.
    echo "blank-generate Processing ${REPO}..." >> /blank/blank.log
    nix-prefetch-git --quiet --leave-dotGit "/blank/${REPO}.git" \
      | grep -v "Nothing new to pack." \
      > "${RUN_DIR}/repo.json"
    echo "blank-generate Building ${REPO}..." >> /blank/blank.log
    nix-build \
      default.nix -A blank.site -I "repository=${RUN_DIR}/repo.json" \
      --option substitute false \
      --out-link "${RUN_DIR}/result" > \
      "${RUN_DIR}/build.log" 2>&1
    EXIT_CODE="$?"
    cat "${RUN_DIR}/build.log"
    mkdir -p "${SITE_DIR}/${REPO}"
    if [[ $EXIT_CODE -ne 0 ]]; then
      echo "blank-generate Failure building ${REPO}. See ${RUN_DIR}/build.log." \
        >> /blank/blank.log

      cat > "${RUN_DIR}/failure.txt" <<EOF
<div class="red">
<span">Build failure.</span>
<code><pre>
EOF
      cat "${RUN_DIR}/build.log" >> "${RUN_DIR}/failure.txt"
      cat >> "${RUN_DIR}/failure.txt" <<EOF
</pre></code></div>
EOF
      if [[ -f "${SITE_DIR}/${REPO}/index.html" ]] ; then
        m1='^<!-- Build failure. -->$'
        m2='^<!-- End build failure. -->$'
        sed -i -e "/$m1/,/$m2/{ /$m1/{p; r ${RUN_DIR}/failure.txt
          }; /$m2/p; d }" \
          "${SITE_DIR}/${REPO}/index.html"
      else
          cat "${RUN_DIR}/failure.txt" > "${SITE_DIR}/${REPO}/index.html"
      fi
    else
      echo "blank-generate Success building ${REPO}." >> /blank/blank.log
      rsync -aP --delete "${RUN_DIR}/result/" "${SITE_DIR}/${REPO}/"
      chmod u+w -R  "${SITE_DIR}/${REPO}"
    fi

  done

# Generate an index with a list of all repositories.
echo "blank-generate Generating index..." >> /blank/blank.log
cat templates/begin.html > "${SITE_DIR}/index.html"
find /blank/ -maxdepth 1 -type d -name '*.git' -exec basename {} \; | \
    sort | \
  while read -r line ; do
    REPO="${line%.*}"
    echo "<li><a href=${REPO}>${REPO}</a></li>" >> \
      "${SITE_DIR}/index.html"
  done
cat templates/end.html >> "${SITE_DIR}/index.html"

echo "blank-generate Done." >> /blank/blank.log

mkdir -p /blank/site
find "${SITE_DIR}/" -exec touch {} \;
rsync -aP "${SITE_DIR}/" "/blank/site/" >> /blank/rsync.log 2>&1
